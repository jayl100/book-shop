// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  created_at DateTime @default(now())

  likes     Like[]
  cart_item CartItem[]
  orders    Order[]
  tokens    Token[]

  @@map("users")
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  img         Int
  category_id Int
  format      String
  isbn        Int
  summary     String   @db.VarChar(255)
  detail      String   @db.Text
  author      String
  pages       Int
  contents    String
  price       Int
  pub_date    DateTime @default(now())
  likes       Int

  total_likes   Like[]
  cart_items    CartItem[]
  ordered_books OrderedBook[]
  orders        Order[]

  categories Category @relation(fields: [category_id], references: [category_id])

  @@map("books")
}

model Like {
  user_id       Int @id
  liked_book_id Int

  users User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  books Book @relation(fields: [liked_book_id], references: [id])

  @@map("likes")
}

model Category {
  category_id   Int    @id @default(autoincrement())
  category_name String @unique

  books Book[]

  @@map("categories")
}

model CartItem {
  id       Int    @id @default(autoincrement())
  book_id  Int
  title    String
  summary  String
  quantity Int
  price    Int
  user_id  Int

  books Book @relation(fields: [book_id], references: [id])
  users User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("cart_iemts")
}

model Delivery {
  id       Int    @id @default(autoincrement())
  address  String
  receiver String
  contact  String

  orders Order[]

  @@map("deleveries")
}

model OrderedBook {
  id       Int @id @default(autoincrement())
  order_id Int
  book_id  Int
  quantity Int

  orders Order @relation(fields: [order_id], references: [id])
  books  Book  @relation(fields: [book_id], references: [id])

  @@map("order_books")
}

model Order {
  id             Int      @id @default(autoincrement())
  book_id        Int
  total_quantity Int
  total_price    Int
  user_id        Int
  delivery_id    Int
  created_at     DateTime @default(now())

  ordered_books OrderedBook[]

  books      Book     @relation(fields: [book_id], references: [id])
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  deliveries Delivery @relation(fields: [delivery_id], references: [id])

  @@map("orders")
}

model Token {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  user_id    Int

  users User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tokens")
}
